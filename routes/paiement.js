/*************************************************************************************************************************************************************************************************************************************************************************************
 *********************************************************** DEBUT DU MODULE REQUIRE ************************************************************************************************************************************************************************************************/

// Express.js est un framework pour construire des applications web basées sur Node.js et pour le développement de serveurs.
var express = require('express')


// Le routage consiste à déterminer comment une application répond à une demande client adressée à un noeud final particulier, à savoir un URI (ou chemin) et une méthode de requête HTTP spécifique (GET, POST, etc.).
//Chaque route peut avoir une ou plusieurs fonctions de gestionnaire, qui sont exécutées lorsque la route est appariée.
var paiement = express.Router();

var db = require('../database/db')

// entrer une nouvelle categorie dans la base de donnée
paiement.post("/nouveaupaiement", (req,res) =>{
    const mypaiement = {
        
        modedepaiement:req.body.modedepaiement,
        date : req.body.date,
        
    };

    db.paiement.findOne({
        where: {modedepaiement: req.body.modedepaiement}
    })
    .then(paiement =>{
        if (!paiement){
            db.paiement.create(mypaiement)
            .then(paiement=> {
                res.json({message: 'ook', paiement})
            })
            .catch(err =>{
                res.send('error' +  err)
            })
        }
        else {
            res.json({
                error: "ce paiement existe deja dans la base de donnée"
            })
        }
    })
.catch(err => {
    res.json({
        error: "error" + err
    })
})
});
/************************************************************ FIN METHODS POST ********************************************************************************************************************************************************************************************************
 **************************************************************************************************************************************************************************************************************************************************************************************/


/*************************************************************************************************************************************************************************************************************************************************************************************
 ************************************************************** DEBUT METHODS GET ****************************************************************************************************************************************************************************************************/


/************************ CHERCHE USER A PARTI DE SON EMAIL********************************/



paiement.get("/Find/:id_paiement", (req, res) =>{
    // trouver l'client avec son email
    db.paiement.findOne({
        where:{id_paiement: req.params.id_paiement}
    }).then(paiement =>{
        //if client exist donc
        if(paiement) {
            res.json({
                paiement: paiement
            })
        }
        else {
            res.json({error: "le client n'existe pas dans la liste des client"})
        }
    })
    .catch(err =>{
        res.json("error" + err);

    })
});
/********************** ICI ON VEUX FAIT UN AFFICHE TOUT LES INFORMATION SOIT ON UTILISE EXCLUDE/INCLUDE ********************************/

paiement.get("/All", (req, res) =>{
    db.paiement.findAll({
        attributes:{
            exclude:[ "modedepaiement"]
        }
    }).then(paiement =>{
        // recuperer toutes les donnes recuperer et les met en json puis 
        res.json(paiement)
    })
    .catch(err =>{
        res.json("error" + err)
    })
});


/************************************************************ Fin Methods GET ********************************************************************************************************************************************************************************************************
 **************************************************************************************************************************************************************************************************************************************************************************************/


 /*************************************************************************************************************************************************************************************************************************************************************************************
 ************************************************************** Debut Methods Update ****************************************************************************************************************************************************************************************************/

/************************ UPDATE ********************************/

paiement.post("/update", (req, res) => {
    db.paiement.findOne({
        where: { modedepaiement: req.body.modedepaiement}
    })
        .then(paiement => {
           if(paiement){
             
            paiement.update({
                modedepaiement:req.body.modedepaiement,
                date : req.body.date,
               })
           }
           else {
               res.json({
                   error: "can't update this client his is not your client"
               })
           }
        })
        .catch(err => {
            res.send('error' + err)
        })
});
/************************************************************ Fin Methods Update ********************************************************************************************************************************************************************************************************
 **************************************************************************************************************************************************************************************************************************************************************************************/


 /*************************************************************************************************************************************************************************************************************************************************************************************
 ************************************************************** Debut Methods Delete ****************************************************************************************************************************************************************************************************/


/************************ DELETE ********************************/

paiement.delete("/deleteBy/:id", (req,res) =>{
    db.paiement.findOne({
        where:{id_paiement: req.params.id}
    }).then(paiement =>{
        if(paiement) {
            // DESTROY VEUT DIRE DETRUIRE IL SUPPRIME CE CHAMPS DE LA TABLE 
            paiement.destroy().then(() => {
                res.json("paiement deleted")
            })
            // SY IL Y A DES ERREURS 
                .catch(err => {
                    res.json("error" + err)
                })
        }
        else {
            res.json({error : "you can't delete this user it not exist in you list of user"})
        }
    })
    // SY IL Y A DES ERREURS 
        .catch(err =>{
            res.json("error" + err);
        })
});


/************************************************************ Fin Methods Delete ********************************************************************************************************************************************************************************************************
 **************************************************************************************************************************************************************************************************************************************************************************************/

module.exports = paiement;
 /************************************************************ FIN DU MODULE ROUTE ****************************************************************************************************************************************************************************************************
 **************************************************************************************************************************************************************************************************************************************************************************************/
